package com.sivaprakash.beneficiary.service;

import java.util.List;
import java.util.UUID;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.sivaprakash.beneficiary.dto.BeneficiaryRequestDTO;
import com.sivaprakash.beneficiary.dto.BeneficiaryResponseDTO;
import com.sivaprakash.beneficiary.entity.Beneficiary;
import com.sivaprakash.beneficiary.entity.Beneficiary.BeneficiaryStatus;
import com.sivaprakash.beneficiary.entity.Beneficiary.BeneficiaryType;
import com.sivaprakash.beneficiary.repository.BeneficiaryRepository;

@Service
public class BeneficiaryServiceImpl implements BeneficiaryService {

    @Autowired
    private BeneficiaryRepository beneficiaryRepository;
    @Override
    @Transactional
    public BeneficiaryResponseDTO addBeneficiary(BeneficiaryRequestDTO request) {
        // First validate if account number already exists (if this is a business requirement)
        if (request.getBeneficiaryId() != null && 
            beneficiaryRepository.existsByBeneficiaryId(request.getBeneficiaryId())) {
            throw new IllegalArgumentException("Beneficiary already exists");
        }

        Beneficiary beneficiary = new Beneficiary();
        // Let the ID be generated by the sequence
        beneficiary.setCustomerId(request.getCustomerId());
        beneficiary.setBeneficiaryName(request.getBeneficiaryName());
        beneficiary.setBeneficiaryBankName(request.getBeneficiaryBankName());
        beneficiary.setBeneficiaryEmail(request.getBeneficiaryEmail());
        beneficiary.setBeneficiaryType(BeneficiaryType.EXTERNAL);
        beneficiary.setRelationship(request.getRelationship());
        beneficiary.setStatus(BeneficiaryStatus.ACTIVE);
        beneficiary.setBeneficiaryAccountNumber(request.getBeneficiaryAccountNumber());
        beneficiary.setBeneficiaryBankCode(request.getBeneficiaryBankCode());
        try {
            beneficiary = beneficiaryRepository.save(beneficiary);
            return convertToDTO(beneficiary, "Beneficiary added successfully");
        } catch (DataIntegrityViolationException e) {
            throw new IllegalStateException("Failed to save beneficiary due to data integrity violation", e);
        }
    }
    
    @Override
    @Transactional(readOnly = true)
    public List<BeneficiaryResponseDTO> getAllBeneficiaries() {
        List<Beneficiary> beneficiaries = beneficiaryRepository.findAll();
        return beneficiaries.stream()
                .map(b -> convertToDTO(b, "Retrieved successfully"))
                .collect(Collectors.toList());
    }

    @Transactional(readOnly = true)
    public List<BeneficiaryResponseDTO> getBeneficiariesByConstomerId(Long customerId) {
        List<Beneficiary> beneficiaries = beneficiaryRepository.findByCustomerId(customerId);
        return beneficiaries.stream()
                .map(b -> convertToDTO(b, "Retrieved successfully"))
                .collect(Collectors.toList());
    }

    private BeneficiaryResponseDTO convertToDTO(Beneficiary beneficiary, String message) {
        BeneficiaryResponseDTO response = new BeneficiaryResponseDTO();
        response.setBeneficiaryId(beneficiary.getBeneficiaryId());
        response.setCustomerId(beneficiary.getCustomerId());
        response.setBeneficiaryAccountNumber(beneficiary.getBeneficiaryAccountNumber());
        response.setBeneficiaryBankCode(beneficiary.getBeneficiaryBankCode());
        response.setBeneficiaryBankName(beneficiary.getBeneficiaryBankName());
        response.setBeneficiaryEmail(beneficiary.getBeneficiaryEmail());
        response.setBeneficiaryName(beneficiary.getBeneficiaryName());
        response.setStatus(beneficiary.getStatus().name());
        response.setReferenceNumber(generateReferenceNumber());
        response.setMessage(message);
        return response;
    }

    private String generateReferenceNumber() {
        return "BEN" + UUID.randomUUID().toString().substring(0, 8).toUpperCase();
    }

    public void deleteBeneficiaryById(Long beneficiaryId) {
	    Beneficiary beneficiary = beneficiaryRepository.findById(beneficiaryId)
	            .orElseThrow(() -> new IllegalArgumentException("Beneficiary not found with ID: " + beneficiaryId));
	    beneficiaryRepository.delete(beneficiary);
	}

}
