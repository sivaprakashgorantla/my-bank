CREATE USER my_bank_user IDENTIFIED BY my_bank_user;

GRANT ALL PRIVILEGES TO my_bank_user;


CREATE TABLE users (
    user_id NUMBER PRIMARY KEY,
    username VARCHAR2(50) UNIQUE NOT NULL,
    password_hash VARCHAR2(256) NOT NULL,
    email VARCHAR2(100) UNIQUE NOT NULL,
    phone_number VARCHAR2(15),
    first_name VARCHAR2(50) NOT NULL,
    last_name VARCHAR2(50) NOT NULL,
    date_of_birth DATE,
    address VARCHAR2(200),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    profile_updated CHAR(1) DEFAULT 'N' CHECK (profile_updated IN ('Y', 'N')),
    status VARCHAR2(20) DEFAULT 'ACTIVE' CHECK (status IN ('ACTIVE', 'INACTIVE', 'SUSPENDED'))
);




http://localhost:8081/swagger-ui/index.html


-- ==========================================
-- User Service Database (user_service_db)
-- ==========================================

-- Users table for authentication and user management
CREATE TABLE users (
    user_id NUMBER PRIMARY KEY,
    username VARCHAR2(50) UNIQUE NOT NULL,
    password_hash VARCHAR2(256) NOT NULL,
    email VARCHAR2(100) UNIQUE NOT NULL,
    phone_number VARCHAR2(15),
    first_name VARCHAR2(50) NOT NULL,
    last_name VARCHAR2(50) NOT NULL,
    date_of_birth DATE,
    address VARCHAR2(200),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    status VARCHAR2(20) DEFAULT 'ACTIVE' CHECK (status IN ('ACTIVE', 'INACTIVE', 'SUSPENDED'))
);

CREATE SEQUENCE user_id_seq START WITH 1 INCREMENT BY 1;

-- Authentication tokens table
CREATE TABLE auth_tokens (
    token_id NUMBER PRIMARY KEY,
    user_id NUMBER NOT NULL,
    token VARCHAR2(256) NOT NULL,
    token_type VARCHAR2(20) CHECK (token_type IN ('ACCESS', 'REFRESH')),
    expires_at TIMESTAMP NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT fk_user_token FOREIGN KEY (user_id) REFERENCES users(user_id)
);

CREATE SEQUENCE token_id_seq START WITH 1 INCREMENT BY 1;

-- ==========================================
-- Account Service Database (account_service_db)
-- ==========================================

-- Account types reference table
CREATE TABLE account_types (
    type_id NUMBER PRIMARY KEY,
    type_name VARCHAR2(20) UNIQUE NOT NULL,
    description VARCHAR2(200),
    min_balance NUMBER(15,2),
    interest_rate NUMBER(5,2)
);

-- Accounts table
CREATE TABLE accounts (
    account_id NUMBER PRIMARY KEY,
    user_id NUMBER NOT NULL,  -- Reference to users table (handled at application level)
    type_id NUMBER NOT NULL,
    account_number VARCHAR2(20) UNIQUE NOT NULL,
    balance NUMBER(15,2) DEFAULT 0 CHECK (balance >= 0),
    currency_code VARCHAR2(3) DEFAULT 'USD',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    status VARCHAR2(20) DEFAULT 'ACTIVE' CHECK (status IN ('ACTIVE', 'INACTIVE', 'FROZEN', 'CLOSED')),
    CONSTRAINT fk_account_type FOREIGN KEY (type_id) REFERENCES account_types(type_id)
);

CREATE SEQUENCE account_id_seq START WITH 1 INCREMENT BY 1;

-- ==========================================
-- Transaction Service Database (transaction_service_db)
-- ==========================================

-- Transactions table
CREATE TABLE transactions (
    transaction_id NUMBER PRIMARY KEY,
    from_account_id NUMBER NOT NULL,  -- Reference to accounts table (handled at application level)
    to_account_id NUMBER NOT NULL,    -- Reference to accounts table (handled at application level)
    amount NUMBER(15,2) NOT NULL CHECK (amount > 0),
    currency_code VARCHAR2(3) DEFAULT 'USD',
    transaction_type VARCHAR2(20) NOT NULL CHECK (transaction_type IN ('TRANSFER', 'DEPOSIT', 'WITHDRAWAL')),
    status VARCHAR2(20) DEFAULT 'PENDING' CHECK (status IN ('PENDING', 'COMPLETED', 'FAILED', 'REVERSED')),
    reference_number VARCHAR2(50) UNIQUE,
    transaction_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    description VARCHAR2(200)
);

CREATE SEQUENCE transaction_id_seq START WITH 1 INCREMENT BY 1;

-- Transaction events for eventual consistency
CREATE TABLE transaction_events (
    event_id NUMBER PRIMARY KEY,
    transaction_id NUMBER NOT NULL,
    event_type VARCHAR2(50) NOT NULL,
    event_data CLOB,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    processed_at TIMESTAMP,
    status VARCHAR2(20) DEFAULT 'PENDING' CHECK (status IN ('PENDING', 'PROCESSED', 'FAILED')),
    CONSTRAINT fk_transaction_event FOREIGN KEY (transaction_id) REFERENCES transactions(transaction_id)
);

CREATE SEQUENCE event_id_seq START WITH 1 INCREMENT BY 1;

-- ==========================================
-- Loan Service Database (loan_service_db)
-- ==========================================

-- Loan products reference table
CREATE TABLE loan_products (
    product_id NUMBER PRIMARY KEY,
    product_name VARCHAR2(50) UNIQUE NOT NULL,
    loan_type VARCHAR2(30) NOT NULL,
    min_amount NUMBER(15,2),
    max_amount NUMBER(15,2),
    min_term_months NUMBER,
    max_term_months NUMBER,
    base_interest_rate NUMBER(5,2),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Loans table
CREATE TABLE loans (
    loan_id NUMBER PRIMARY KEY,
    user_id NUMBER NOT NULL,         -- Reference to users table (handled at application level)
    product_id NUMBER NOT NULL,
    amount NUMBER(15,2) NOT NULL CHECK (amount > 0),
    interest_rate NUMBER(5,2) NOT NULL,
    term_months NUMBER NOT NULL,
    status VARCHAR2(20) DEFAULT 'PENDING' CHECK (status IN ('PENDING', 'APPROVED', 'REJECTED', 'ACTIVE', 'CLOSED')),
    application_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    approval_date TIMESTAMP,
    disbursement_date TIMESTAMP,
    last_payment_date TIMESTAMP,
    next_payment_date TIMESTAMP,
    remaining_amount NUMBER(15,2),
    CONSTRAINT fk_loan_product FOREIGN KEY (product_id) REFERENCES loan_products(product_id)
);

CREATE SEQUENCE loan_id_seq START WITH 1 INCREMENT BY 1;

-- Loan payments table
CREATE TABLE loan_payments (
    payment_id NUMBER PRIMARY KEY,
    loan_id NUMBER NOT NULL,
    amount NUMBER(15,2) NOT NULL CHECK (amount > 0),
    payment_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    status VARCHAR2(20) DEFAULT 'PENDING' CHECK (status IN ('PENDING', 'COMPLETED', 'FAILED')),
    payment_method VARCHAR2(20) NOT NULL,
    CONSTRAINT fk_loan_payment FOREIGN KEY (loan_id) REFERENCES loans(loan_id)
);

CREATE SEQUENCE payment_id_seq START WITH 1 INCREMENT BY 1;

-- Payment events for eventual consistency
CREATE TABLE payment_events (
    event_id NUMBER PRIMARY KEY,
    payment_id NUMBER NOT NULL,
    event_type VARCHAR2(50) NOT NULL,
    event_data CLOB,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    processed_at TIMESTAMP,
    status VARCHAR2(20) DEFAULT 'PENDING' CHECK (status IN ('PENDING', 'PROCESSED', 'FAILED')),
    CONSTRAINT fk_payment_event FOREIGN KEY (payment_id) REFERENCES loan_payments(payment_id)
);

CREATE SEQUENCE payment_event_id_seq START WITH 1 INCREMENT BY 1;